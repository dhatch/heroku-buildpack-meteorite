#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

# debug
# set -x

# clean up leaking environment
unset GIT_DIR

# parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2
LP_DIR=`cd $(dirname $0); cd ..; pwd`

[ ! -d $BUILD_DIR ] && mkdir $BUILD_DIR
[ ! -d $CACHE_DIR ] && mkdir $CACHE_DIR

function error() {
  echo " !     $*"
  exit 1
}

function mktmpdir() {
  dir=$(mktemp -t node-$1-XXXX)
  rm -rf $dir
  mkdir -p $dir
  echo $dir
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

function run_npm() {
  command="$1"

  cd "$BUILD_DIR"
  HOME="$BUILD_DIR" $VENDORED_NODE/bin/node $VENDORED_NODE/bin/npm $command 2>&1 | indent

  if [ "${PIPESTATUS[*]}" != "0 0" ]; then
    echo " !     Failed to $command dependencies with npm"
    exit 1
  fi
}

function package_download() {
  engine="$1"
  version="$2"
  location="$3"

  mkdir -p $location
  package="http://s3pository.heroku.com/$engine/v$version/$engine-v$version-linux-x64.tar.gz"
  echo " - downloading and extracting $engine from $package" | indent
  curl $package -s -o - | tar -zxf  - -C $location --strip 1
}

echo "-----> Resolving engine versions"

# Resolve node version from package.json

# Source: https://github.com/heroku/heroku-buildpack-nodejs/blob/master/bin/compile

# Look in package.json's engines.node field for a semver range
semver_range=$(cat $BUILD_DIR/package.json | $LP_DIR/vendor/jq -r .engines.node)

# Resolve node version using semver.io
node_version=$(curl --silent --get --data-urlencode "range=${semver_range}" https://semver.io/node/resolve)

# Recommend using semver ranges in a safe manner
if [ "$semver_range" == "null" ]; then
  echo "You can specify a node version in package.json" | indent
  semver_range=""
elif [ "$semver_range" == "*" ]; then
  echo "Avoid using semver ranges like '*' in engines.node" | indent
elif [ ${semver_range:0:1} == ">" ]; then
  echo "Avoid using semver ranges starting with '>' in engines.node" | indent
fi

# Output info about requested range and resolved node version
if [ "$semver_range" == "" ]; then
  echo "Defaulting to latest stable node: $node_version" | indent
else
  echo "Requested node range:  $semver_range" | indent
  echo "Resolved node version: $node_version" | indent
fi

# vendor directories
VENDORED_NODE="$(mktmpdir node)"
VENDORED_MODULES="$(mktmpdir modules)"

# download and unpack packages
echo "-----> Fetching Node.js binaries"
package_download "node" "${node_version}" "${VENDORED_NODE}"

# setting up paths for building
PATH="$VENDORED_NODE/bin:$VENDORED_MODULES/bin:$PATH"
INCLUDE_PATH="$VENDORED_NODE/include"
export npm_config_prefix="$VENDORED_MODULES"
export CPATH="$INCLUDE_PATH"
export CPPPATH="$INCLUDE_PATH"


############################################
# install meteorite
############################################
echo "-----> Installing meteorite with npm"

run_npm "install meteorite -g"
echo "Meteorite installed" | indent

METEOR_BUILD_DIR="$BUILD_DIR/.meteor/heroku_build"
mkdir -p "$HOME"

if [[ -f $BUILD_DIR/.meteor/release ]]; then
  METEOR_RELEASE="--release $(cat $BUILD_DIR/.meteor/release)"
  echo "Using meteor release $METEOR_RELEASE"
else
  echo "Meteor release not specified in .meteor/release file.  Using default." | indent
  METEOR_RELEASE=''
fi

############################################
# install meteor + packages through mrt
# bundle, and install into app/
############################################
cd $BUILD_DIR
echo "Installing meteor" | indent

# Using different folder to prevent install script form deleting packages file
VENDORED_METEOR="$(mktmpdir meteor)"
curl https://install.meteor.com | HOME="$VENDORED_METEOR" /bin/sh | indent
echo "Meteor installed" | indent

echo "Installing packages" | indent
HOME="$BUILD_DIR" mrt install | indent
echo "Building meteor bundle" | indent
HOME="$VENDORED_METEOR" "$VENDORED_METEOR"/.meteor/meteor bundle $METEOR_RELEASE "$CACHE_DIR"/bundle.tar.gz 2>&1 | indent

mkdir -p "$METEOR_BUILD_DIR"/app
tar -zxf "$CACHE_DIR"/bundle.tar.gz --strip-components 1 -C "$METEOR_BUILD_DIR"/app
rm "$CACHE_DIR"/bundle.tar.gz
############################################

############################################
# Prepare ENV vars
############################################
echo "Setting up MONGO_URL in .profile.d"
mkdir -p "$BUILD_DIR"/.profile.d
cat > "$BUILD_DIR"/.profile.d/mongo.sh <<EOF
  #!/bin/sh

  export MONGO_URL=\${MONGO_URL:-\$MONGOHQ_URL};
EOF

# vendor node into the slug
PATH="$METEOR_BUILD_DIR/bin:$PATH"
echo "-----> Vendoring node into slug"
mkdir -p "$METEOR_BUILD_DIR/bin"
cp "$VENDORED_NODE/bin/node" "$METEOR_BUILD_DIR/bin/node"
